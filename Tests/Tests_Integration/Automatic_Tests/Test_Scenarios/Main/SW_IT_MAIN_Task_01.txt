					Autoliv Electronics Document
--------------------------------------------------------------------------
Nightly test: No
Test type: Requirement-Based test
Regression Test: No
Fault injection method used: No
Resource usage evaluation: No
Priority: No
Safety relevant: No
Requirement under test: ARCH_SW_OS_0050, ARCH_SW_OS_0051, ARCH_SW_OS_0052, ARCH_SW_OS_0053, ARCH_SW_OS_0054, ARCH_SW_OS_0057, ARCH_SW_OS_0058, ARCH_SW_OS_0065, ARCH_SW_OS_0059, ARCH_SW_OS_0060, ARCH_SW_OS_0061
ARCH_SW_OS_0050: The Default_Init_Task task shall have the highest priority regarding periodic tasks.
ARCH_SW_OS_0051: The priority of the Default_Init_Task_Trusted task shall also have a high priority for init functions.
ARCH_SW_OS_0052: The priority of the ApplInitTask_Core0 shall be also higher sincer the applications init functions are called here.
ARCH_SW_OS_0053: The priority of the BswTask_Core0_HighPrio task shall be lower than the init tasks.
ARCH_SW_OS_0054: The priority of the ApplTask_Core0_HighPrio task shall be lower than the BswTask_Core0_HighPrio task one.
ARCH_SW_OS_0057: The priority of the BswTask_Core0_LowPrio shall be lower than higher priorirty tasks.
ARCH_SW_OS_0058: The priority of the OsTask_ALV_BeltFunctionAlgo task shall be bigger than ApplTask_Core0_LowPrio task.
ARCH_SW_OS_0065: The priority of the ApplTask_Core0_LowPrio task shall be lower than all perioric tasks, except wdg monitoring one.
ARCH_SW_OS_0059: The priority of the ApplBackgroundTask_Core0 shall be low.
ARCH_SW_OS_0060: The priority of the BackgroundTask_Core0 task shall be low.
ARCH_SW_OS_0061: The priority of the IdleTask_OsCore0 idle task has the virtual priority 0xFFFFFFFF to differentiate it from regular tasks. It will be generated to have the lowest priority, even if there are tasks configured with priority 0.
--------------------------------------------------------------------------

Preconditions

	Step 1: Bench Initialization

Action: ARCH_SW_OS_0050

	Step 2: Set breakpoint in TASK(Default_Init_Task).

	Step 3: Check if CPU is stopped in TASK(Default_Init_Task). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0051

	Step 4: Set breakpoint in TASK(Default_Init_Task_Trusted).

	Step 5: Check if CPU is stopped in TASK(Default_Init_Task_Trusted). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0052

	Step 6: Set breakpoint in TASK(ApplInitTask_Core0).

	Step 7: Check if CPU is stopped in TASK(ApplInitTask_Core0). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0053

	Step 8: Set breakpoint in TASK(BswTask_Core0_HighPrio).

	Step 9: Check if CPU is stopped in TASK(BswTask_Core0_HighPrio). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0054

	Step 10: Set breakpoint in TASK(ApplTask_Core0_HighPrio).

	Step 11: Check if CPU is stopped in TASK(ApplTask_Core0_HighPrio). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0057

	Step 12: Set breakpoint in TASK(BswTask_Core0_LowPrio).

	Step 13: Check if CPU is stopped in TASK(BswTask_Core0_LowPrio). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0058

	Step 14: Set breakpoint in TASK(OsTask_ALV_BeltFunctionAlgo).

	Step 15: Check if CPU is stopped in TASK(OsTask_ALV_BeltFunctionAlgo). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0065

	Step 16: Set breakpoint in TASK(OsTask_ALV_BeltFunctionAlgo).

	Step 17: Check if CPU is stopped in TASK(ApplTask_Core0_LowPrio). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0059

	Step 18: Set breakpoint in TASK(ApplBackgroundTask_Core0).

	Step 19: Check if CPU is stopped in TASK(ApplBackgroundTask_Core0). 
		Expected result:  CPU is Stopped

Action: ARCH_SW_OS_0060, ARCH_SW_OS_0061

	Step 20: Set breakpoint in TASK(BackgroundTask_Core0).

	Step 21: Check if CPU is stopped in TASK(ApplBackgroundTask_Core0). 
		Expected result:  CPU is Stopped

Postcondition

	Step 22: Return ECU to default values
