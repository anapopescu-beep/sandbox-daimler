					Autoliv Electronics Document
--------------------------------------------------------------------------
Nightly test: No
Test type: Requirement-Based test
Regression Test: No
Fault injection method used: No
Resource usage evaluation: No
Priority: No
Safety relevant: No
Requirement under test: ARCH_SW_CIL_0252, ARCH_SW_CIL_0253, ARCH_SW_CIL_0254
ARCH_SW_CIL_0252: CIL component shall ensure repetition of vibration phase (cycle 21) of HWA 2 for NVP_u16DurationHaptic2.
ARCH_SW_CIL_0253: CIL component shall ensure repetition of vibration phase (cycle 23) of HWA 3 for NVP_u16DurationHaptic3.
ARCH_SW_CIL_0254: CIL component shall ensure repetition of vibration phase (cycle 25) of HWA 4 for NVP_u16DurationHaptic4.
--------------------------------------------------------------------------

Preconditions

	Step 1: Bench Initialization

	Step 2: Set signal RBTMFL_SP_Lvl_Rq_ST35 to I_C06_RBTM_LVL_RQ_PROFILE16.

	Step 3: Set a breakpoint in function CIL_runCANToAppli at line 'cil_TriggerProfiles(CIL_stManagedCycle.u8CurrentRequestedCycle);'.

	Step 4: Check if CPU stopped at line 'cil_TriggerProfiles(CIL_stManagedCycle.u8CurrentRequestedCycle);'. 
		Expected result:  CPU is Stopped

	Step 5: Set a breakpoint in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic2)/KU16_TEN);'.

	Step 6: Check if CPU stopped  in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic2)/KU16_TEN);'. 
		Expected result:  CPU is Stopped

Action: ARCH_SW_CIL_0252

	Step 7: Evaluate variable NVP_u16DurationHaptic2'. 
		Expected result:  1000

	Step 8: Set a breakpoint in function cil_TriggerProfiles at line '(void)Rte_Read_prrEnableCycle21_b8CycleValidity(&u8CycleValidityStatus);'.

Action: ARCH_SW_CIL_0252

	Step 9: Check if CPU stopped at line '(void)Rte_Read_prrEnableCycle21_b8CycleValidity(&u8CycleValidityStatus);'. 
		Expected result:  CPU is Stopped

	Step 10: Set signal RBTMFL_SP_Lvl_Rq_ST35 to I_C06_RBTM_LVL_RQ_PROFILE17.

	Step 11: Set a breakpoint in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic3)/KU16_TEN);'.

	Step 12: Check if CPU stopped  in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic2)/KU16_TEN);'. 
		Expected result:  CPU is Stopped

	Step 13: Set a breakpoint in function cil_TriggerProfiles at line '(void)Rte_Read_prrEnableCycle23_b8CycleValidity(&u8CycleValidityStatus);'.

Action: ARCH_SW_CIL_0253

	Step 14: Check if CPU stopped at line '(void)Rte_Read_prrEnableCycle21_b8CycleValidity(&u8CycleValidityStatus);'. 
		Expected result:  CPU is Stopped

Action: ARCH_SW_CIL_0253

	Step 15: Evaluate variable NVP_u16DurationHaptic3'. 
		Expected result:  1000

	Step 16: Set signal RBTMFL_SP_Lvl_Rq_ST35 to I_C06_RBTM_LVL_RQ_PROFILE18.

	Step 17: Set a breakpoint in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic2)/KU16_TEN);'.

	Step 18: Check if CPU stopped  in function cil_ManageHapticRepetition at line 'CIL_u16HWARepetitionTime = ((uint16)(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData.NVP_u16DurationHaptic2)/KU16_TEN);'. 
		Expected result:  CPU is Stopped

	Step 19: Set a breakpoint in function cil_TriggerProfiles at line '(void)Rte_Read_prrEnableCycle25_b8CycleValidity(&u8CycleValidityStatus);'.

Action: ARCH_SW_CIL_0254

	Step 20: Check if CPU stopped at line '(void)Rte_Read_prrEnableCycle25_b8CycleValidity(&u8CycleValidityStatus);'. 
		Expected result:  CPU is Stopped

Action: ARCH_SW_CIL_0254

	Step 21: Evaluate variable NVP_u16DurationHaptic3'. 
		Expected result:  1000

Postcondition

	Step 22: Return ECU to default values
