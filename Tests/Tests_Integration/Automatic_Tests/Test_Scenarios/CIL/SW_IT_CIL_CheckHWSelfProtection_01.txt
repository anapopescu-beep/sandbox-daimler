					Autoliv Electronics Document
--------------------------------------------------------------------------
Nightly test: No
Test type: Requirement-Based test
Regression Test: No
Fault injection method used: No
Resource usage evaluation: No
Priority: No
Safety relevant: No
Requirement under test: ARCH_SW_CIL_0269
ARCH_SW_CIL_0269: If HW Self Protection autotest is failed then release will be inhibited 1 second after autotest has passed.
--------------------------------------------------------------------------

Preconditions

	Step 1: Bench Initialization

	Step 2: Set signal Presf_Lvl_ST3 to I_C04_PRESF_LVL_V2_LVL1.

	Step 3: Set a breakpoint in function CIL_runCANToAppli().

Action: ARCH_SW_CIL_0269

	Step 4: Check if CPU stopped in function CIL_runCANToAppli(). 
		Expected result:  CPU is Stopped

	Step 5: Set a breakpoint in function PAL_cbk_CheckHWSelfProtection() at line 'Rte_Call_pclCheckHWSelfProtection_AutotestCallback(&u8TestResult);' and press step in.

	Step 6: Check if CPU stopped in function PAL_Autotest_CheckHWSelfProtection(). 
		Expected result:  CPU is Stopped

	Step 7: Set a breakpoint in function PAL_Autotest_CheckHWSelfProtection() at line '*pu8TestResult = pal_u8ResultOfAutoTest;'.

Action: ARCH_SW_CIL_0269

	Step 8: Check if CPU stopped in function PAL_Autotest_CheckHWSelfProtection() at line '*pu8TestResult = pal_u8ResultOfAutoTest;'. 
		Expected result:  CPU is Stopped

	Step 9: Set variable *pu8TestResult to KU8_ATM_TEST_NOK.

	Step 10: Set a breakpoint in function cil_ManageInhibitConditions() at line 'Rte_Write_psrCustomerSpecific_b8SignalRelInhibition(KU8_TRUE);' and press run.

Action: ARCH_SW_CIL_0269

	Step 11: Check if CPU stopped in function cil_ManageInhibitConditions() at line 'Rte_Write_psrCustomerSpecific_b8SignalRelInhibition(KU8_TRUE);'. 
		Expected result:  CPU is Stopped

Postcondition

	Step 12: Return ECU to default values
