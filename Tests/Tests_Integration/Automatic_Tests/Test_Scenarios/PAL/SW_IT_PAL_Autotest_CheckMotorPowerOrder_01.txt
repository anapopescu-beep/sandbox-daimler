					Autoliv Electronics Document
--------------------------------------------------------------------------
Nightly test: No
Test type: Requirement-Based test
Regression Test: No
Fault injection method used: No
Resource usage evaluation: No
Priority: No
Safety relevant: No
Requirement under test: ARCH_SW_PAL_0382, ARCH_SW_PAL_0381, ARCH_SW_PAL_0390, ARCH_SW_PAL_0391, ARCH_SW_PAL_0392
ARCH_SW_PAL_0382: The component shall check if a high PWM duty cycle will not be applied for a too long time.
ARCH_SW_PAL_0381: The current executed data from BFE shall be an input.
ARCH_SW_PAL_0390: The ERH_runGetAecStatus function shall be called to get the motor Order AEC status.
ARCH_SW_PAL_0391: ATM_runGetTestResult shall be called to get the status ot specific tests (inhibiting the execution of the present one if failed).S
ARCH_SW_PAL_0392: MMG_runCheckModeStatus shall be called to get the context status.
--------------------------------------------------------------------------

Preconditions

	Step 1: Bench Initialization

	Step 2: Set a breakpoint in function PAL_cbk_CheckMotorPowerOrder at the RTE Call for CheckMotorPowerOrder autotest.

Action: ARCH_SW_PAL_0382, ARCH_SW_PAL_0381, ARCH_SW_PAL_0393

	Step 3: Check if CPU stopped in function PAL_cbk_CheckMotorPowerOrder at the RTE Call for CheckMotorPowerOrder autotest 
		Expected result:  BP reached.

	Step 4: Step in.

	Step 5: Set a breakpoint in function PAL_Autotest_CheckMotorPowerOrder at the RTE call for ERH_runGetAecStatus.

	Step 6: Check if CPU stopped in function PAL_Autotest_CheckMotorPowerOrder at the RTE Call for ERH_runGetAecStatus autotest 
		Expected result:  BP reached.

	Step 7: Read *AecStatus 
		Expected result:  Local variable read.

	Step 8: Set a breakpoint in function PAL_Autotest_CheckMotorPowerOrder at the RTE call for GetTestResult.

	Step 9: Check if CPU stopped in function PAL_Autotest_CheckMotorPowerOrder at the RTE Call for GetTestResult. 
		Expected result:  BP reached.

	Step 10: Set a breakpoint in function PAL_Autotest_CheckMotorPowerOrder at the RTE call for MMG_runCheckModeStatus.

	Step 11: Check if CPU stopped in function PAL_Autotest_CheckMotorPowerOrder at the RTE Call for MMG_runCheckModeStatus. 
		Expected result:  BP reached.

	Step 12: Read *ModeStatus 
		Expected result:  Local variable read.

	Step 13: Set a breakpoint in function PAL_Autotest_CheckMotorPowerOrder at the return of autotest result.

	Step 14: Check if CPU stopped in function PAL_Autotest_CheckMotorPowerOrder(). 
		Expected result:  BP reached.

	Step 15: Overwrite autotest result with KU8_ATM_TEST_OK 
		Expected result:  Variable is set to 0x1.

Action: ARCH_SW_PAL_0391

	Step 16: Evaluate MotorOrderEventStatus 
		Expected result:  Variable equal to *pu8AecStatus data pointer.

Action: ARCH_SW_PAL_0390

	Step 17: Evaluate PreviousADCTestResult 
		Expected result:  Variable equal to 0x1.

Action: ARCH_SW_PAL_0392

	Step 18: Evaluate TensioningModeStatus 
		Expected result:  Variable equal to *ModeStatus data pointer.

	Step 19: Set a breakpoint in function PAL_cbk_CheckMotorPowerOrder after the return of the autotest result.

	Step 20: Check if CPU stopped in function PAL_cbk_CheckMotorPowerOrder() after the return of the autotest result. 
		Expected result:  BP reached.

	Step 21: Read autotest result transmited from ATM 
		Expected result:  Variable is equal to 0x1.

Postcondition

	Step 22: Return ECU to default values
