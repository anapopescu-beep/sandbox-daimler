/*************************************************************************
                                                                          
AUTOLIV ELECTRONIC document.                                              
                                                                          
-------------------------------------                                     
                                                                          
DUPLICATION or DISCLOSURE PROHIBITED without prior written consent        
                                                                          
**************************************************************************
                                                                          
This file Nvp_Generated.h is generated by the Excel document SBE_4G_NVP_layout.xls
when using the "Generate All" Button
                                                                          
Date and time of generation of files:     3/21/2024 / 8:04:09 PM
 
Current revision: $Revision: 1.3.2.27 $
Checked in:       $Date: 2024/03/22 10:46:46CET $
 
*************************************************************************/
                                                                          
#ifndef NVP_GENERATED_H_
#define NVP_GENERATED_H_ 1
                                                                          
#include "common.h"
#include "Platform_Types.h"
#include "Compiler.h"
#include "Rte_Compiler_Cfg.h"
#include "Nvp_MemoryMapping.h"
                                                                          
/*************************************************************************
Other components external interface inclusion
*************************************************************************/
                                                                          
/*************************************************************************
Declaration of constants
*************************************************************************/
                                                                          
/*************************************************************************
Declaration of macros
*************************************************************************/
 
/*************************************************************************
Declaration of types
*************************************************************************/
#define NVP_VAR
#define NVP_CONST
/*************************************************************************
Declaration of variables
*************************************************************************/
 
/*************************************************************************
Calibration Data Types
*************************************************************************/
 
typedef struct {
const uint32  NVP_u32ComfortCyclesEOLThrs ;
const uint32  NVP_u32LowForceEOLThrs;
const uint32  NVP_u32HighForceEOLThrs ;
const uint32  NVP_u32MaxForceEOLThrs ;
const uint32  NVP_u32RequestEOLThrs;
const uint32  NVP_u32EOLComfortCyclesMAP;
const uint32  NVP_u32EOLLowForceCyclesMAP;
const uint32  NVP_u32EOLHighForceCyclesMAP;
const uint32  NVP_u32EOLMaxForceCyclesMAP;
const uint32  NVP_u32EOLRequestCyclesMAP;
}CALIB_BLOCK_ID_EOL_PARAM_StorageType; 
 
typedef struct {
const uint8   NVP_au8BeltFctPriorities[38];
}CALIB_BLOCK_ID_BFS_PRIO_PARAM_StorageType; 
 
typedef struct {
const uint8   NVP_u8PIDsupplyP;
const uint8   NVP_u8PIDsupplyI;
const uint8   NVP_u8PIDsupplyD;
const uint8   NVP_u8PIDmotorP;
const uint8   NVP_u8PIDmotorI;
const uint8   NVP_u8PIDmotorD;
}CALIB_BLOCK_ID_PID_PARAM_StorageType; 
 
typedef struct {
const uint16  NVP_au16WeightTempIdxRel[7];
const uint8   NVP_au8WeightFactorsRel[7];
}CALIB_BLOCK_ID_WEIGHT_REL_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16WeightTempIdxTens0[7];
const uint8   NVP_au8WeightFactorsTens0[7];
}CALIB_BLOCK_ID_WEIGHT_TENS0_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16WeightTempIdxTens1[7];
const uint8   NVP_au8WeightFactorsTens1[7];
}CALIB_BLOCK_ID_WEIGHT_TENS1_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16WeightTempIdxTens2[7];
const uint8   NVP_au8WeightFactorsTens2[7];
}CALIB_BLOCK_ID_WEIGHT_TENS2_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16WeightTempIdxTens3[7];
const uint8   NVP_au8WeightFactorsTens3[7];
}CALIB_BLOCK_ID_WEIGHT_TENS3_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16AdaptCurrentLimitTempIdx[7];
const uint8   NVP_au8AdaptCurrentLimitFactors[7];
}CALIB_BLOCK_ID_INT_CURRENT_CORR_StorageType; 
 
typedef struct {
const uint16  NVP_au16AdaptCurrentLimitValues[64];
}CALIB_BLOCK_ID_INT_CURRENT_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16PowerDegradVoltIdx[6];
const uint8   NVP_au8PowerDegradFactors[6];
}CALIB_BLOCK_ID_POWER_DEGRADATION_StorageType; 
 
typedef struct {
const uint16  NVP_au16AlphaMotorCurrent[3];
const uint8   NVP_au8AlphaFactors[3];
}CALIB_BLOCK_ID_ECPL_ALPHA_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_au16BetaSupplyCurrent[3];
const uint8   NVP_au8BetaFactors[3];
}CALIB_BLOCK_ID_ECPL_BETA_TABLE_StorageType; 
 
typedef struct {
const uint16  NVP_u16BrakingSequenceDuration;
const uint16  NVP_u16CplBobbinSpeedThrs;
const boolean NVP_b8CplDetectionByBMM;
const boolean NVP_b8CplDetectionByCAN;
const boolean NVP_b8IseCplActivated;
}CALIB_BLOCK_ID_ECPL_OTHER_PARAM_StorageType; 
 
typedef struct {
const uint16  NVP_au16MotorCurrentAbortTempIdx[7];
const uint8   NVP_au8MotorCurrentAbortFactors[7];
}CALIB_BLOCK_ID_BPA_MOTOR_CURRENT_StorageType; 
 
typedef struct {
const uint16  NVP_u16UnderKL30QualificationThrs;
const uint16  NVP_u16UnderKL30DeskillingThrs;
const uint16  NVP_u16UnderKL30bgQualificationThrs;
const uint16  NVP_u16UnderKL30bgDeskillingThrs;
const uint16  NVP_u16OverKL30QualificationThrs;
const uint16  NVP_u16OverKL30DeskillingThrs;
const uint16  NVP_u16OverKL30bgQualificationThrs;
const uint16  NVP_u16OverKL30bgDeskillingThrs;
const uint16  NVP_u16UnderKL30DuringTensQualificationThrs;
const uint16  NVP_u16UnderKL30DuringTensDeskillingThrs;
const uint16  NVP_u16OverKL30DuringTensQualificationThrs;
const uint16  NVP_u16OverKL30DuringTensDeskillingThrs;
const uint16  NVP_u16KL30MaximumThr;
const uint16  NVP_u16KL30MinimumThr;
const uint16  NVP_u16ImplausibleKL30bgThrs;
const uint16  NVP_u16MinKL30ForVBoostAT;
}CALIB_BLOCK_ID_VOLT_THRS_StorageType; 
 
typedef struct {
const uint8   NVP_u8VehEquipFirstByte;
const uint8   NVP_u8VehEquipSecondByte;
const uint8   NVP_u8VehEquipThirdByte;
const uint8   NVP_u8VehEquipFourthByte;
const uint16  NVP_u16VehEquipmentUVAbort;
const uint16  NVP_u16VehEquipmentUV;
const uint16  NVP_u16VehEquipmentOVAbort;
const uint16  NVP_u16VehEquipmentOV;
const uint32  NVP_u32VehEquipPreSafeCycleAct;
}CALIB_BLOCK_ID_VEHICLE_EQUIPMENT_StorageType; 
 
typedef struct {
const uint16  NVP_ku16KL30LossDetectionThr;
const uint16  NVP_ku16KL30EndLossDetectionThr;
}CALIB_BLOCK_ID_BATTERY_LOSS_DETECTION_THRS_StorageType; 
 
typedef struct {
const sint16  NVP_s16GainIntegerBoost;
const sint16  NVP_s16GainIntegerStandard;
}CALIB_BLOCK_ID_BOOST_StorageType; 
 
typedef struct {
const uint16  NVP_u16EcuResistance;
const uint16  NVP_u16TemperatureDefaultValue;
const uint16  NVP_u16TemperatureFunctionalLowThrs;
const uint16  NVP_u16TemperatureFunctionalHighThrs;
const uint16  NVP_u16HWSelfProtectionCurrentThrs;
}CALIB_BLOCK_ID_ECU_PROPERTIES_StorageType; 
 
typedef struct {
const uint32  NVP_au32DeficiencyThrs[5];
}CALIB_BLOCK_ID_SW_SELF_PROTECTION_THRS_StorageType; 
 
typedef struct {
const uint16  NVP_au16MotorResistTempIndex[7];
const uint8   NVP_au8MotorResistReferences[7];
}CALIB_BLOCK_ID_MOTOR_RESIST_PARAM_StorageType; 
 
typedef struct {
const uint8   NVP_u8BoostActivation;
}CALIB_BLOCK_ID_BOOST_ACTIVATION_StorageType; 
 
/*************************************************************************
Application Data Types
*************************************************************************/
 
typedef struct {
uint8   NVP_u8ECULocation;
}NVP_BLOCK_ID_ECU_LOCATION_StorageType; 
 
typedef struct {
uint8   NVP_au8AssemblySerialNumber[28];
}NVP_BLOCK_ID_BELT_ASSEMBLY_MANUF_DATE_AND_SN_StorageType; 
 
typedef struct {
uint16  NVP_au16CalibADCRel[5];
uint16  NVP_au16CalibADCTens[5];
uint16  NVP_au16CurrentProbeRel[5];
uint16  NVP_au16CurrentProbeTens[5];
}NVP_BLOCK_ID_HB_CALIBRATION_StorageType; 
 
typedef struct {
uint8   NVP_au8AeeTraceabilityNumber[12];
}NVP_BLOCK_ID_AEE_TRACEABILITY_StorageType; 
 
typedef struct {
uint32  NVP_au32ExecutedCycleCounters[5];
}NVP_BLOCK_ID_EXECUTION_COUNTERS_StorageType; 
 
typedef struct {
uint32  NVP_u32MeasFrame12RAMAddress;
uint8   NVP_u8BlockSize;
}NVP_BLOCK_ID_MEASUREMENT_FRAME_12_CONFIG_StorageType; 
 
typedef struct {
uint8   NVP_u8MeasFrameTiming;
uint8   NVP_au8MeasFrameBlockConfig[3];
}NVP_BLOCK_ID_MEASUREMENT_FRAME_CONFIG_StorageType; 
 
typedef struct {
uint32  NVP_u32WarmResetCause;
uint32  NVP_u32WarmResetCounter;
}NVP_BLOCK_ID_WARM_RESET_StorageType; 
 
typedef struct {
uint16  NVP_u16HWARepetition;
}NVP_BLOCK_ID_HWA_REPETITION_StorageType; 
 
typedef struct {
uint32  NVP_u32CheckMotorOrderMediumMaxDuration;
uint32  NVP_u32MotorCurrentMediumMaxDuration;
uint32  NVP_u32SWThermalProtectionValidationThrs;
uint32  NVP_u32SWThermalProtectionDeskillingThrs;
uint16  NVP_u16OverCurrentProtectionStop;
uint16  NVP_u16HESTestLowThrs;
uint16  NVP_u16HESTestHighThrs;
uint16  NVP_u16MotorDisconnectedVoltageThrs;
uint16  NVP_u16MotorCurrentHighResetTime;
uint16  NVP_u16MotorCurrentMediumResetTime;
uint16  NVP_u16MOSFETinSCMaxDropVoltage;
uint16  NVP_u16CheckMotorOrderHighMaxDuration;
uint16  NVP_u16MotorCurrentHighMaxDuration;
uint16  NVP_u16CheckMotorOrderHighResetTime;
uint16  NVP_u16CheckMotorOrderMediumResetTime;
uint16  NVP_u16MOSFETinOCMinDropVoltage;
uint16  NVP_u16DelayAfterCycleExecutionOrPOR;
uint16  NVP_u16DelayAfterCycleExecutionOrPOR_UV;
uint16  NVP_u16CrankingOffConfirmationDelay;
uint16  NVP_u16CrankingOutOfDateDelay;
uint16  NVP_u16CheckMotorOrderResetTime;
uint16  NVP_u16MotorCurrentResetTime;
uint16  NVP_u16MotorSCCurrentThrsMin;
uint16  NVP_u16MotorDisengagementMinTemp;
sint16  NVP_s16MotorDisengagementMaxPowerOrder;
sint16  NVP_s16MotorDisengagementMinPowerOrder;
uint16  NVP_u16MinDiffVoltageToValidateBatterySurvey;
uint16  NVP_u16HSSWRegTestInitThreshold;
uint16  NVP_u16HSSWRegTestHighThreshold;
uint16  NVP_u16HSSWRegTestLowThreshold;
uint16  NVP_u16HSSWRegTestDeadTime;
uint16  NVP_u16TemperatureSensorLowThrs;
uint16  NVP_u16TemperatureSensorHighThrs;
sint8   NVP_s8MotorSCMaxDutyCycle;
sint8   NVP_s8MotorSCMinDutyCycle;
uint8   NVP_u8HSSWRegMaxTries;
uint8   NVP_u8PreliminaryBoosterMaxTries;
uint8   NVP_u8NbOccurenceToValidateMotorSC;
uint8   NVP_u8MOSFETinOCMaxTries;
uint16  NVP_u16ADCLowVoltageThrs;
uint16  NVP_u16ADCMiddleLowVoltageThrs;
uint16  NVP_u16ADCMiddleHighVoltageThrs;
uint16  NVP_u16ADCHighVoltageThrs;
uint8   NVP_u8MotorCurrentHighThrs;
uint8   NVP_u8MotorCurrentMediumThrs;
uint8   NVP_u8CheckMotorOrderHighThrs;
uint8   NVP_u8checkMotorOrderMediumThrs;
uint8   NVP_u8SWThermalProtecDecStep;
uint8   NVP_u8NbOccurenceToValidateMotorBlocked;
uint8   NVP_u8NbOccurenceToDeskillMotorBlocked;
uint8   NVP_u8NbOccurenceToDeskillMotorSC;
uint8   NVP_u8NbOccurenceToValidateBatteryVoltage;
}NVP_BLOCK_ID_TESTS_PARAM_StorageType; 
 
typedef struct {
uint16  NVP_au16TempTableVol[10];
uint16  NVP_au16TempTableLSB[10];
sint8   NVP_s8TempOffsetChamberNTC;
uint8   NVP_u8TempTableNBDots;
}NVP_BLOCK_TEMP_SENSOR_TABLE_StorageType; 
 
typedef struct {
uint16  NVP_au16VelocityPIDTimeIdx [5];
sint16  NVP_as16VelocityKIFactors [5];
sint16  NVP_as16VelocityKPFactors [5];
}NVP_BLOCK_ID_VELOCITY_PID_PARAM_StorageType; 
 
typedef struct {
uint8   NVP_au8AECStatus[64];
}NVP_BLOCK_ID_AEC_STATUS_StorageType; 
 
typedef struct {
uint8   NVP_au8AutoTestsActivation[38];
}NVP_BLOCK_ID_ATM_ENABLE_PARAM_StorageType; 
 
typedef struct {
uint8   NVP_au8PreSafeRecorderStart[2];
uint8   NVP_au8LocalVoltageStart[1];
uint8   NVP_au8EcuTemperatureStart[2];
uint8   NVP_au8SystemTimeStart[5];
uint8   NVP_au8PreSafeRecorderStop[2];
uint8   NVP_au8LocalVoltageStop[1];
uint8   NVP_au8EcuTemperatureStop[2];
uint8   NVP_au8SystemTimeStop[5];
uint8   NVP_au8PreSafeRecorderState[2];
}NVP_BLOCK_ID_PRE_SAFE_RECORDER_1_StorageType; 
 
typedef struct {
uint8   NVP_au8PreSafeRecorderStart[2];
uint8   NVP_au8LocalVoltageStart[1];
uint8   NVP_au8EcuTemperatureStart[2];
uint8   NVP_au8SystemTimeStart[5];
uint8   NVP_au8PreSafeRecorderStop[2];
uint8   NVP_au8LocalVoltageStop[1];
uint8   NVP_au8EcuTemperatureStop[2];
uint8   NVP_au8SystemTimeStop[5];
uint8   NVP_au8PreSafeRecorderState[2];
}NVP_BLOCK_ID_PRE_SAFE_RECORDER_2_StorageType; 
 
typedef struct {
uint8   NVP_u8PreSafeRecorderID;
}NVP_BLOCK_ID_PRE_SAFE_RECORDER_ID_StorageType; 
 
typedef struct {
uint8   NVP_au8BeltProfilesDefinitions[420];
}NVP_BLOCK_ID_CYCLE_0_StorageType; 
 
typedef struct {
uint8   NVP_au8StepsDefinitions[1160];
}NVP_BLOCK_ID_STEP_0_StorageType; 
 
typedef struct {
uint8   SystemContextData0[12];
}NVP_BLOCK_ID_SYSTEM_CONTEXT_0_StorageType; 
 
typedef struct {
uint8   SystemContextData1[12];
}NVP_BLOCK_ID_SYSTEM_CONTEXT_1_StorageType; 
 
typedef struct {
uint8   SystemContextData2[12];
}NVP_BLOCK_ID_SYSTEM_CONTEXT_2_StorageType; 
 
typedef struct {
uint16  NVP_u16TimeoutPresafe5;
uint8   NVP_u8PRESAFEAccelerationTimeout;
uint8   NVP_u8Haptic1AccelerationTimeout;
uint8   NVP_u8APIAccelerationTimeout;
uint8   NVP_u8AfterBuckle;
uint8   NVP_u8AfterMd;
uint8   NVP_u8PwtDelay;
uint8   NVP_u8BSR1AccelerationTimeout;
}NVP_BLOCK_ID_CYCLE_DELAYS_MB_StorageType; 
 
typedef struct {
uint16  NVP_u16DurationHaptic1;
uint16  NVP_u16DurationHaptic2;
uint16  NVP_u16DurationHaptic3;
uint16  NVP_u16DurationHaptic4;
uint8   NVP_u8HapticType;
}NVP_BLOCK_ID_HAPTIC_CONFIG_MB_StorageType; 
 
typedef struct {
uint8   NVP_uAssociatedCounter[11];
uint8   NVP_u8AssociatedCounterBSR;
}NVP_BLOCK_ID_EOL_MAPPING_MB_StorageType; 
 
typedef struct {
uint8   NVP_u8BeltSlkDecMode;
uint8   NVP_u8SteeringWheelConfig;
uint8   NVP_u8PSCurveConfig;
}NVP_BLOCK_ID_CAN_INPUT_SIGNALS_StorageType; 
 
typedef struct {
uint8   NVP_au8HwVersion[3];
}NVP_BLOCK_ID_HW_VERSION_StorageType; 
 
typedef struct {
uint8   NVP_au8PCBAProgrammedPartNumber[10];
}NVP_BLOCK_ID_PCBA_PPN_StorageType; 
 
typedef struct {
uint8   NVP_au8FLHardwarePartnumber[10];
uint8   NVP_au8FRHardwarePartnumber[10];
}NVP_BLOCK_ID_HW_PARTNUMBER_StorageType; 
 
/*************************************************************************
Application Data
*************************************************************************/
extern VAR(NVP_BLOCK_ID_ECU_LOCATION_StorageType, NVP_VAR) NVP_BLOCK_ID_ECU_LOCATION_RamBlockData;
extern VAR(NVP_BLOCK_ID_BELT_ASSEMBLY_MANUF_DATE_AND_SN_StorageType, NVP_VAR) NVP_BLOCK_ID_BELT_ASSEMBLY_MANUF_DATE_AND_SN_RamBlockData;
extern VAR(NVP_BLOCK_ID_HB_CALIBRATION_StorageType, NVP_VAR) NVP_BLOCK_ID_HB_CALIBRATION_RamBlockData;
extern VAR(NVP_BLOCK_ID_AEE_TRACEABILITY_StorageType, NVP_VAR) NVP_BLOCK_ID_AEE_TRACEABILITY_RamBlockData;
extern VAR(NVP_BLOCK_ID_EXECUTION_COUNTERS_StorageType, NVP_VAR) NVP_BLOCK_ID_EXECUTION_COUNTERS_RamBlockData;
extern VAR(NVP_BLOCK_ID_MEASUREMENT_FRAME_12_CONFIG_StorageType, NVP_VAR) NVP_BLOCK_ID_MEASUREMENT_FRAME_12_CONFIG_RamBlockData;
extern VAR(NVP_BLOCK_ID_MEASUREMENT_FRAME_CONFIG_StorageType, NVP_VAR) NVP_BLOCK_ID_MEASUREMENT_FRAME_CONFIG_RamBlockData;
extern VAR(NVP_BLOCK_ID_WARM_RESET_StorageType, NVP_VAR) NVP_BLOCK_ID_WARM_RESET_RamBlockData;
extern VAR(NVP_BLOCK_ID_HWA_REPETITION_StorageType, NVP_VAR) NVP_BLOCK_ID_HWA_REPETITION_RamBlockData;
extern VAR(NVP_BLOCK_ID_TESTS_PARAM_StorageType, NVP_VAR) NVP_BLOCK_ID_TESTS_PARAM_RamBlockData;
extern VAR(NVP_BLOCK_TEMP_SENSOR_TABLE_StorageType, NVP_VAR) NVP_BLOCK_TEMP_SENSOR_TABLE_RamBlockData;
extern VAR(NVP_BLOCK_ID_VELOCITY_PID_PARAM_StorageType, NVP_VAR) NVP_BLOCK_ID_VELOCITY_PID_PARAM_RamBlockData;
extern VAR(NVP_BLOCK_ID_AEC_STATUS_StorageType, NVP_VAR) NVP_BLOCK_ID_AEC_STATUS_RamBlockData;
extern VAR(NVP_BLOCK_ID_ATM_ENABLE_PARAM_StorageType, NVP_VAR) NVP_BLOCK_ID_ATM_ENABLE_PARAM_RamBlockData;
extern VAR(NVP_BLOCK_ID_PRE_SAFE_RECORDER_1_StorageType, NVP_VAR) NVP_BLOCK_ID_PRE_SAFE_RECORDER_1_RamBlockData;
extern VAR(NVP_BLOCK_ID_PRE_SAFE_RECORDER_2_StorageType, NVP_VAR) NVP_BLOCK_ID_PRE_SAFE_RECORDER_2_RamBlockData;
extern VAR(NVP_BLOCK_ID_PRE_SAFE_RECORDER_ID_StorageType, NVP_VAR) NVP_BLOCK_ID_PRE_SAFE_RECORDER_ID_RamBlockData;
extern VAR(NVP_BLOCK_ID_CYCLE_0_StorageType, NVP_VAR) NVP_BLOCK_ID_CYCLE_0_RamBlockData;
extern VAR(NVP_BLOCK_ID_STEP_0_StorageType, NVP_VAR) NVP_BLOCK_ID_STEP_0_RamBlockData;
extern VAR(NVP_BLOCK_ID_SYSTEM_CONTEXT_0_StorageType, NVP_VAR) NVP_BLOCK_ID_SYSTEM_CONTEXT_0_RamBlockData;
extern VAR(NVP_BLOCK_ID_SYSTEM_CONTEXT_1_StorageType, NVP_VAR) NVP_BLOCK_ID_SYSTEM_CONTEXT_1_RamBlockData;
extern VAR(NVP_BLOCK_ID_SYSTEM_CONTEXT_2_StorageType, NVP_VAR) NVP_BLOCK_ID_SYSTEM_CONTEXT_2_RamBlockData;
extern VAR(NVP_BLOCK_ID_CYCLE_DELAYS_MB_StorageType, NVP_VAR) NVP_BLOCK_ID_CYCLE_DELAYS_MB_RamBlockData;
extern VAR(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_StorageType, NVP_VAR) NVP_BLOCK_ID_HAPTIC_CONFIG_MB_RamBlockData;
extern VAR(NVP_BLOCK_ID_EOL_MAPPING_MB_StorageType, NVP_VAR) NVP_BLOCK_ID_EOL_MAPPING_MB_RamBlockData;
extern VAR(NVP_BLOCK_ID_CAN_INPUT_SIGNALS_StorageType, NVP_VAR) NVP_BLOCK_ID_CAN_INPUT_SIGNALS_RamBlockData;
extern VAR(NVP_BLOCK_ID_HW_VERSION_StorageType, NVP_VAR) NVP_BLOCK_ID_HW_VERSION_RamBlockData;
extern VAR(NVP_BLOCK_ID_PCBA_PPN_StorageType, NVP_VAR) NVP_BLOCK_ID_PCBA_PPN_RamBlockData;
extern VAR(NVP_BLOCK_ID_HW_PARTNUMBER_StorageType, NVP_VAR) NVP_BLOCK_ID_HW_PARTNUMBER_RamBlockData;
 
/*************************************************************************
Application Default Data
*************************************************************************/
 
extern CONST(NVP_BLOCK_ID_ECU_LOCATION_StorageType, NVP_CONST) NVP_BLOCK_ID_ECU_LOCATION_DefaultData;
extern CONST(NVP_BLOCK_ID_BELT_ASSEMBLY_MANUF_DATE_AND_SN_StorageType, NVP_CONST) NVP_BLOCK_ID_BELT_ASSEMBLY_MANUF_DATE_AND_SN_DefaultData;
extern CONST(NVP_BLOCK_ID_HB_CALIBRATION_StorageType, NVP_CONST) NVP_BLOCK_ID_HB_CALIBRATION_DefaultData;
extern CONST(NVP_BLOCK_ID_AEE_TRACEABILITY_StorageType, NVP_CONST) NVP_BLOCK_ID_AEE_TRACEABILITY_DefaultData;
extern CONST(NVP_BLOCK_ID_EXECUTION_COUNTERS_StorageType, NVP_CONST) NVP_BLOCK_ID_EXECUTION_COUNTERS_DefaultData;
extern CONST(NVP_BLOCK_ID_MEASUREMENT_FRAME_12_CONFIG_StorageType, NVP_CONST) NVP_BLOCK_ID_MEASUREMENT_FRAME_12_CONFIG_DefaultData;
extern CONST(NVP_BLOCK_ID_MEASUREMENT_FRAME_CONFIG_StorageType, NVP_CONST) NVP_BLOCK_ID_MEASUREMENT_FRAME_CONFIG_DefaultData;
extern CONST(NVP_BLOCK_ID_WARM_RESET_StorageType, NVP_CONST) NVP_BLOCK_ID_WARM_RESET_DefaultData;
extern CONST(NVP_BLOCK_ID_HWA_REPETITION_StorageType, NVP_CONST) NVP_BLOCK_ID_HWA_REPETITION_DefaultData;
extern CONST(NVP_BLOCK_ID_TESTS_PARAM_StorageType, NVP_CONST) NVP_BLOCK_ID_TESTS_PARAM_DefaultData;
extern CONST(NVP_BLOCK_TEMP_SENSOR_TABLE_StorageType, NVP_CONST) NVP_BLOCK_TEMP_SENSOR_TABLE_DefaultData;
extern CONST(NVP_BLOCK_ID_VELOCITY_PID_PARAM_StorageType, NVP_CONST) NVP_BLOCK_ID_VELOCITY_PID_PARAM_DefaultData;
extern CONST(NVP_BLOCK_ID_AEC_STATUS_StorageType, NVP_CONST) NVP_BLOCK_ID_AEC_STATUS_DefaultData;
extern CONST(NVP_BLOCK_ID_ATM_ENABLE_PARAM_StorageType, NVP_CONST) NVP_BLOCK_ID_ATM_ENABLE_PARAM_DefaultData;
extern CONST(NVP_BLOCK_ID_PRE_SAFE_RECORDER_1_StorageType, NVP_CONST) NVP_BLOCK_ID_PRE_SAFE_RECORDER_1_DefaultData;
extern CONST(NVP_BLOCK_ID_PRE_SAFE_RECORDER_2_StorageType, NVP_CONST) NVP_BLOCK_ID_PRE_SAFE_RECORDER_2_DefaultData;
extern CONST(NVP_BLOCK_ID_PRE_SAFE_RECORDER_ID_StorageType, NVP_CONST) NVP_BLOCK_ID_PRE_SAFE_RECORDER_ID_DefaultData;
extern CONST(NVP_BLOCK_ID_CYCLE_0_StorageType, NVP_CONST) NVP_BLOCK_ID_CYCLE_0_DefaultData;
extern CONST(NVP_BLOCK_ID_STEP_0_StorageType, NVP_CONST) NVP_BLOCK_ID_STEP_0_DefaultData;
extern CONST(NVP_BLOCK_ID_SYSTEM_CONTEXT_0_StorageType, NVP_CONST) NVP_BLOCK_ID_SYSTEM_CONTEXT_0_DefaultData;
extern CONST(NVP_BLOCK_ID_SYSTEM_CONTEXT_1_StorageType, NVP_CONST) NVP_BLOCK_ID_SYSTEM_CONTEXT_1_DefaultData;
extern CONST(NVP_BLOCK_ID_SYSTEM_CONTEXT_2_StorageType, NVP_CONST) NVP_BLOCK_ID_SYSTEM_CONTEXT_2_DefaultData;
extern CONST(NVP_BLOCK_ID_CYCLE_DELAYS_MB_StorageType, NVP_CONST) NVP_BLOCK_ID_CYCLE_DELAYS_MB_DefaultData;
extern CONST(NVP_BLOCK_ID_HAPTIC_CONFIG_MB_StorageType, NVP_CONST) NVP_BLOCK_ID_HAPTIC_CONFIG_MB_DefaultData;
extern CONST(NVP_BLOCK_ID_EOL_MAPPING_MB_StorageType, NVP_CONST) NVP_BLOCK_ID_EOL_MAPPING_MB_DefaultData;
extern CONST(NVP_BLOCK_ID_CAN_INPUT_SIGNALS_StorageType, NVP_CONST) NVP_BLOCK_ID_CAN_INPUT_SIGNALS_DefaultData;
extern CONST(NVP_BLOCK_ID_HW_VERSION_StorageType, NVP_CONST) NVP_BLOCK_ID_HW_VERSION_DefaultData;
extern CONST(NVP_BLOCK_ID_PCBA_PPN_StorageType, NVP_CONST) NVP_BLOCK_ID_PCBA_PPN_DefaultData;
extern CONST(NVP_BLOCK_ID_HW_PARTNUMBER_StorageType, NVP_CONST) NVP_BLOCK_ID_HW_PARTNUMBER_DefaultData;
 
/*************************************************************************
Calibration Data
*************************************************************************/
 
extern CONST(CALIB_BLOCK_ID_EOL_PARAM_StorageType, NVP_CONST) CALIB_BLOCK_ID_EOL_PARAM_RomBlockData;
extern CONST(CALIB_BLOCK_ID_BFS_PRIO_PARAM_StorageType, NVP_CONST) CALIB_BLOCK_ID_BFS_PRIO_PARAM_RomBlockData;
extern CONST(CALIB_BLOCK_ID_PID_PARAM_StorageType, NVP_CONST) CALIB_BLOCK_ID_PID_PARAM_RomBlockData;
extern CONST(CALIB_BLOCK_ID_WEIGHT_REL_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_WEIGHT_REL_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_WEIGHT_TENS0_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_WEIGHT_TENS0_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_WEIGHT_TENS1_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_WEIGHT_TENS1_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_WEIGHT_TENS2_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_WEIGHT_TENS2_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_WEIGHT_TENS3_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_WEIGHT_TENS3_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_INT_CURRENT_CORR_StorageType, NVP_CONST) CALIB_BLOCK_ID_INT_CURRENT_CORR_RomBlockData;
extern CONST(CALIB_BLOCK_ID_INT_CURRENT_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_INT_CURRENT_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_POWER_DEGRADATION_StorageType, NVP_CONST) CALIB_BLOCK_ID_POWER_DEGRADATION_RomBlockData;
extern CONST(CALIB_BLOCK_ID_ECPL_ALPHA_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_ECPL_ALPHA_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_ECPL_BETA_TABLE_StorageType, NVP_CONST) CALIB_BLOCK_ID_ECPL_BETA_TABLE_RomBlockData;
extern CONST(CALIB_BLOCK_ID_ECPL_OTHER_PARAM_StorageType, NVP_CONST) CALIB_BLOCK_ID_ECPL_OTHER_PARAM_RomBlockData;
extern CONST(CALIB_BLOCK_ID_BPA_MOTOR_CURRENT_StorageType, NVP_CONST) CALIB_BLOCK_ID_BPA_MOTOR_CURRENT_RomBlockData;
extern CONST(CALIB_BLOCK_ID_VOLT_THRS_StorageType, NVP_CONST) CALIB_BLOCK_ID_VOLT_THRS_RomBlockData;
extern CONST(CALIB_BLOCK_ID_VEHICLE_EQUIPMENT_StorageType, NVP_CONST) CALIB_BLOCK_ID_VEHICLE_EQUIPMENT_RomBlockData;
extern CONST(CALIB_BLOCK_ID_BATTERY_LOSS_DETECTION_THRS_StorageType, NVP_CONST) CALIB_BLOCK_ID_BATTERY_LOSS_DETECTION_THRS_RomBlockData;
extern CONST(CALIB_BLOCK_ID_BOOST_StorageType, NVP_CONST) CALIB_BLOCK_ID_BOOST_RomBlockData;
extern CONST(CALIB_BLOCK_ID_ECU_PROPERTIES_StorageType, NVP_CONST) CALIB_BLOCK_ID_ECU_PROPERTIES_RomBlockData;
extern CONST(CALIB_BLOCK_ID_SW_SELF_PROTECTION_THRS_StorageType, NVP_CONST) CALIB_BLOCK_ID_SW_SELF_PROTECTION_THRS_RomBlockData;
extern CONST(CALIB_BLOCK_ID_MOTOR_RESIST_PARAM_StorageType, NVP_CONST) CALIB_BLOCK_ID_MOTOR_RESIST_PARAM_RomBlockData;
extern CONST(CALIB_BLOCK_ID_BOOST_ACTIVATION_StorageType, NVP_CONST) CALIB_BLOCK_ID_BOOST_ACTIVATION_RomBlockData;
 
/*************************************************************************
Declaration of constant data
*************************************************************************/
 
/*************************************************************************
Declaration of functions
*************************************************************************/
 
/*************************************************************************
Evolution of the component
 
Created by: C. Sauvage
Updated by: R. Cristoi
 
$Log: Nvp_Generated.h  $
Revision 1.3.2.27 2024/03/22 10:46:46CET Emanuel Jivan (emanuel.jivan) 
HW Partnumber implementation.
 
 
*************************************************************************/
 
/* end of file */
 
#endif /* NVP_GENERATED_H_ */
 
