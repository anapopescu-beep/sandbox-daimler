					Autoliv Electronics Document
--------------------------------------------------------------------------
Nightly test: No
Test type: Requirement-Based test
Regression Test: No
Fault injection method used: No
Resource usage evaluation: No
Priority: No
Safety relevant: No
Requirement under test: ARCH_SW_MMG_0133, ARCH_SW_MMG_0135, ARCH_SW_MMG_0138, ARCH_SW_MMG_0157, ARCH_SW_MMG_0159, ARCH_SW_MMG_0160, ARCH_SW_MMG_0162
ARCH_SW_MMG_0133: The �KU32_AEC_GROUP_MASK_SELF_PROTECTION � SW/HW Self protection status AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0135: The �KU32_AEC_GROUP_MASK_UNDER_VO_TENS � to check undervoltage AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0138: The �KU32_AEC_GROUP_MASK_EOL_LOW_HIGH � to check counters AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0157: The �KU32_AEC_GROUP_MASK_OVER_VO_TENS � to check overvoltage during tensioning AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0159: The �KU32_AEC_GROUP_MASK_TIMEOUT_BUCKLE � to check timout for buckle signal AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0160: The �KU32_AEC_GROUP_MASK_STEERING_CONFIGURATION � to check control unit configuration AEC group status from ERH shall be an input for MMG_KU32_MASK_AEC_INHIB_TENSIONING_CYCLES context qualification.
ARCH_SW_MMG_0162: The �KU32_AEC_GROUP_MASK_EOL_COMFORT � To check EOL comfort counter AEC group status from ERH shall be an input for MMG_KU32_MASK_EOL_COUNTER_INHIBITION context qualification.
--------------------------------------------------------------------------

Preconditions

	Step 1: Bench Initialization

	Step 2: Set a breakpoint in function MMG_runUpdateModeStatus at line mmg_UpdateModeStatus_Temperature_EOL_KL30_TensioningCycles.

	Step 3: Set a breakpoint in function mmg_UpdateModeStatus_Temperature_EOL_KL30_TensioningCycles at the first line.

	Step 4: Step in mmg_UpdateModeStatus_Temperature_EOL_KL30_TensioningCycles.

Action: ARCH_SW_MMG_0133

	Step 5: Set a breakpoint at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_TEMPERATURE_HIGH] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_SELF_PROTECTION);.

	Step 6: Set a breakpoint at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_IMPL_BUCKLE_TENS] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_IMPLAUSIBLE_DATA_BUCKLE_ORC);.

Action: ARCH_SW_MMG_0138, ARCH_SW_MMG_0162

	Step 7: Check if CPU stopped at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_IMPL_BUCKLE_TENS] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_IMPLAUSIBLE_DATA_BUCKLE_ORC);.

	Step 8: Set a breakpoint at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_TIMOEUT_BUCKLEK_TENS] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_TIMEOUT_BUCKLE);.

Action: ARCH_SW_MMG_0135, ARCH_SW_MMG_0159

	Step 9: Check if CPU stopped at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_TIMOEUT_BUCKLEK_TENS] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_TIMEOUT_BUCKLE);.

Action: ARCH_SW_MMG_0138, ARCH_SW_MMG_0162

	Step 10: Set a breakpoint at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_EOL_LOW_AND_HIGH] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_EOL_LOW_HIGH);.

Action: ARCH_SW_MMG_0138, ARCH_SW_MMG_0162

	Step 11: Check if CPU stopped at line u32AecStatus_TensioningCycles[MMG_KU8_IDX_EOL_LOW_AND_HIGH] = (u32AECGroupStatus & KU32_AEC_GROUP_MASK_EOL_LOW_HIGH);.

Postcondition

	Step 12: Return ECU to default values
